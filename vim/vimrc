set nocompatible

call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

set background=dark
let g:solarized_termtrans=1
let g:solarized_termcolors=256
let g:solarized_contrast="high"
let g:solarized_visibility="high"
colorscheme solarized

" inspiration
" http://stevelosh.com/blog/2010/09/coming-home-to-vim/
" https://github.com/spf13/spf13-vim/blob/master/.vimrc
" https://github.com/mnazim/dotfiles/blob/master/vim/vimrc

set modelines=0
set showmode
set ruler
set showcmd
set backspace=indent,eol,start
set number
set ttyfast
set scrolloff=5

let mapleader =	 ","
let maplocalleader = "\\"

set history=1000
set spell

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" auto chdir - might break Command-T
autocmd BufEnter * execute "chdir ".escape(expand("%:p:h"), ' ')

" Searching
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>

" let's try to do things properly
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap j gj
nnoremap k gk

" loose the <shift> key for accessing the command area
nnoremap ; :

"Maps for jj to act as esc
inoremap jj <esc>
cnoremap jj <C-c>
inoremap jk <esc>
inoremap kj <esc>

" <leader>v selects the just pasted text
nnoremap <leader>v V`]

" copy/paste (via vim-fakeclip)
map <leader>p "*p
map <leader>y "*y
" set clipboard=unnamed  " maybe someday we'll get +clipboard

" mouse
set mouse=a

" syntax
filetype on
filetype plugin on
syntax on
filetype indent on

" terminal title
set title
set titleold="Terminal"
set titlestring=%F\ -\ Vim

" omnicomplete
let g:SuperTabDefaultCompletionType = "context"

" tagbar
let g:tagbar_usearrows = 1

" closetag
autocmd FileType html,php let b:closetag_html_style=1
autocmd FileType html,xhtml,xml,php source ~/.vim/bundle/closetag/plugin/closetag.vim

" supertag
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"

" command-T
let g:CommandTSearchPath = $HOME . '/Code'
noremap <leader>o <Esc>:CommandT<CR>
noremap <leader>O <Esc>:CommandTFlush<CR>
noremap <leader>m <Esc>:CommandTBuffer<CR>

" nerdtree
map <F6> :NERDTreeToggle<CR>
map <leader>e :NERDTreeFind<CR>
nmap <leader>nt :NERDTreeFind<CR>

let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=1
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1

" folding
set foldmethod=indent

" backup
set backupdir=~/.vim/sessions
set dir=~/.vim/sessions
set noswapfile
set undodir=~/.vim/undo
set undofile

" status line
set cmdheight=2
set laststatus=2
set statusline=[%l,%v\ %P%M]
" set statusline+=[CWD:\ %{CWD()}]
set statusline+=\ %f

" display a warning if the file format isn't Unix
set statusline+=%#warningmsg#
set statusline+=%{&ff!='unix'?'['.&ff.']':''}
set statusline+=%*

" display a warning if file encoding isn't UTf-8
set statusline+=%#warningmsg#
set statusline+=%{(&fenc!='utf-8'&&&fenc!='')?'['.&fenc.']':''}
set statusline+=%*

set statusline+=%h      "help file flag
set statusline+=%y      "filetype
set statusline+=%r      "read only flag
set statusline+=%w      "
set statusline+=%m\     "modified flag

set statusline+=%{fugitive#statusline()}\  " git branch

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Lithium configuration
"-- Encoding
set fileencodings=utf-8

"-- Indentation
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent
set noexpandtab

"-- Show whitespace chars
set listchars=tab:▸\•,extends:»,precedes:«,trail:•
" set list

"-- Highlight long lines (soft limit: 80, hard limit: 100)
:au BufWinEnter *.php,*.py let w:m1=matchadd('Search', '\%<101v.\%>80v', -1)
:au BufWinEnter *.php,*.py let w:m2=matchadd('ErrorMsg', '\%>100v.', -1)

"-- Remove trailing whitespaces from lines
autocmd FileType php autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\s\+$","","")'))

"-- Press F5 to Clean Current Buffer
"-- (i.e., 2-spaces become tabs, end-line whitespace trimmed)
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<CR>:%s/  /\t/eg<Bar>:let @/=_s<Bar>:nohl<CR>

"-- No eols
:autocmd BufWritePre *.php setlocal binary
:autocmd BufWritePre *.php setlocal noeol
:autocmd BufWritePost *.php setlocal nobinary
